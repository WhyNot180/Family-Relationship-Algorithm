
START

    Create nodes that have a name, a pointer to their parent, a boolean for whether they have been marked as seen, and the number of hops to get there

    primaryTraversal(secondNode*, 0)

    markSearch(firstNode*, 0)

    INT depth = traversalHops - searchHops

    INT partial_consanguinity = (traversalHops + searchHops) - |depth|

    PRINT name of firstNode concatenated with " is the ", findFullConsanguinity(partial_consanguinity, depth), " of ", name of secondNode

    cleanTraversal(firstNode*)

END

FUNCTION primaryTraversal(node*, traversalHops):

    SET hops OF node TO traversalHops
    SET marked TO true

    IF parent OF node IS NULL, THEN RETURN
    ELSE primaryTraversal(parent*, traversalHops + 1)


FUNCTION cleanTraversal(node*):

    SET marked TO false

    IF parent OF node IS NULL, THEN RETURN
    ELSE cleanTraversal(parent*)

    
FUNCTION markSearch(node*, searchHops):

    IF node IS marked, THEN RETURN searchHops AS WELL AS hops OF node
    ELSE RETURN markSearch(parent*, searchHops + 1)


FUNCTION findFullConsanguinity(partial_consanguinity, depth):

    CASE partial_consanguinity OF:
        0 : 
            IF depth IS 0 THEN RETURN "self"
            ELSE IF depth IS < 0 THEN RETURN findGeneration(depth) concat with "child"
            ELSE IF depth IS > 0 THEN RETURN findGeneration(depth) concat with "parent"
        2: 
            IF depth IS 0 THEN RETURN "sibling"
            ELSE IF depth IS < 0 THEN RETURN findParentOrSiblingGeneration(depth) concat with "nephew/niece"
            ELSE IF depth IS > 0 THEN RETURN findParentOrSiblingGeneration(depth) concat with "uncle/aunt"
        OTHERWISE:
            IF partial_consanguinity IS < 2 AND A MULTIPLE OF 2, THEN:
                INT numberCousin = partial_consanguinity - (partial_consanguinity/2 + 1)
                INT timesRemoved = |depth| + numberCousin - 1
                IF timesRemoved IS == 0, THEN RETURN ORDINAL FORM OF numberCousin concat with " cousin"
                ELSE RETURN ORDINAL FORM OF numberCousin concat with " cousin ", timesRemoved, and " times removed"


FUNCTION findGeneration(depth):
    IF |depth| IS == 1, THEN RETURN "grand"
    ELSE IF |depth| IS GREATER THAN 1:
        STRING greats = ""
        FOR depth TIMES, concat "great " with greats
        RETURN greats concat with "grand"